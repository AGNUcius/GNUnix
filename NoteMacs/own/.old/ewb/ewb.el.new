;; ewb.el --- Emacs Web Browser

;; Copyright (C) 2002 Patware Unc.

;; Author: Patrick Anderson <patware@freeshell.org>
;; Keywords: hypermedia, browser, web, net

;; This file is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 2, or (at your option)
;; any later version.

;; Commentary:
;;   type C-h m for keystroke help

;; Version: (latest at http://patware.freeshell.org/emacs/ewb.el)
;;   -.09 -- much more responsive because i'm using the idea from http://emacswiki.org/cgi-bin/wiki.pl?PrettyLambda to piggy-back onto font-lock.  can now view local files (just call ewb-mode while visiting an html file).  killing stale ewb-connection when entering ewb-get.  added bug:  format suppression not working.
;;   -.1a -- fixed dangerous sentinel code (when ewb-connection finally exits, the formatting was being applied to whichever buffer had focus.)
;;   -.1 --- sending a more complete request - sourceforge.net works, but replies with gzipped content.  patware.freeshell.org works but ewb-connection hangs.  now using HTTP/1.1
;;   -.2a -- removed referer string.
;;   -.2 --- sending referer. changed version numbering. ewb-href now accepts <a name=>. need to move to state-machine parser.
;;   -.3 --- prefix arg or file extensions suppress formatting. write bookmarks to file, customizeable
;;   -.4 --- added ewb-revert [(g)], minibuffer state messages, display ewb-current-url above header, mouse-face, help-echo
;;   -.5 --- first alpha.

;; Bugs/Goals/Dreams:  {}'s indicate someone is working on it
;;   {pa} something terribly wrong with how the macros are being expanded in `ewb-font-lock-keywords'
;;   format suppression not working.
;;   no external dependencies.  runs on emacs --no-init-file.
;;   a directory not ending in '/' may give a 302
;;     One fallback would be to always try with a slash appended (if you get
;;     a 404), as if redirected. Do not always append a slash, of course. --
;;     AlexSchroeder
;;   process `ewb-connection' hangs on some sites [dmoz.org is an example].
;;     i think the request is fine.  i now realize this isn't a bug.  the process doesn't end (the socket isn't closed) until a timeout [tried playing with Keep-Alive: to no avail].  that is when ewb-sentinel is called.  i had moved the formatting code from ewb-filter trying to improve performance; and i wasn't prepared to process the 1k chunks received in that callback.  hopefully an incremental
;;   {pa} handle form data RFC 2616

;;   {pa} use xml.el to make state parser.
;;   {pa} asynchronous load.
;;   display bold, italics
;;   turn <frame >into link
;;   handle encodings [gzip, deflate, compress, etc.]
;;   handle ssl. i don't know how to use ssl yet. does tramp have ssl client code?
;;   exciting as a full lisp browser.  --PierreGaston
;;   And filling of paragraphs, perhaps. -- AlexSchroeder
;;   I really like how the headers remain visible.  -- AlexSchroeder
;;   use thing-at-point-url-at-point from thingatpt for a default value. -- AlexSchroeder

;; Installation:
;;   (autoload 'ewb "ewb" "emacs web browser" t) ;put in your .emacs
;;   type M-x eval-buffer RET then M-x ewb RET to try it now
;;   M-x customize-variable RET browse-url-browser-function to make ewb your default browser.

;; Code:

(defun ewb (url &optional raw)
  "emacs web browser.
\\{ewb-mode-map}"
  (interactive "sURL: \nP")
  (switch-to-buffer (get-buffer-create "*Emacs Web Browser*"))
  (ewb-mode)
  (ewb-parse-url url nil raw))

(defvar ewb-mode-map (make-sparse-keymap))

(define-key ewb-mode-map [(b)] 'ewb-bookmarks)
(defun ewb-bookmarks ()
  (interactive)
  (find-file ewb-bookmark-file))
(define-key ewb-mode-map [(a)] (lambda () (interactive) (write-region (concat ewb-current-url "\n") nil ewb-bookmark-file t)))

(define-key ewb-mode-map [(o)] 'ewb)

(define-key ewb-mode-map [(g)] 'ewb-revert)
(defun ewb-revert (&optional raw)
  (interactive "P")
  (ewb ewb-current-url raw)
  (setq ewb-history (cdr ewb-history)))

(define-key ewb-mode-map [(9)] 'ewb-next)
(defun ewb-next ()
  "jump to next link"
  (interactive)
  (re-search-forward ewb-href)
  (message (match-string 1)))

(define-key ewb-mode-map [(shift 9)] 'ewb-prev)
(defun ewb-prev ()
  "jump to prev link"
  (interactive)
  (re-search-backward ewb-href)
  (message (match-string 1)))

(define-key ewb-mode-map [(13)] 'ewb-follow)
(defun ewb-follow (&optional raw)
  "follow this link"
  (interactive "P")
  (re-search-backward ewb-href)
  (ewb-parse-url (match-string 1) 1 raw))

(define-key ewb-mode-map [(mouse-2)] 'ewb-follow-mouse)
(defun ewb-follow-mouse (event &optional raw)
  (interactive "e\nP")
  (goto-char (posn-point (event-end event)))
  (ewb-follow raw))

(define-key ewb-mode-map [(s)] 'ewb-search)
(defun ewb-search (str)
  "use google"
  (interactive "sFor: ")
  (ewb (concat "www.google.com/search?q=" (replace-regexp-in-string " " "+" str))))

(define-key ewb-mode-map [(q)] 'bury-buffer)
(define-key ewb-mode-map " " 'scroll-up)
(define-key ewb-mode-map [(u)] 'scroll-down)
(define-key ewb-mode-map [(h)] (lambda () (interactive) (mapcar 'print ewb-history)))
(define-key ewb-mode-map [(U)] 'ewb-back)
(defun ewb-back (&optional raw)
  "go back in history"
  (interactive "P")
  (if ewb-history
	  (progn
		(setq ewb-history (cdr ewb-history))
		(let ((cur (car ewb-history)))
		  (setq ewb-history (cdr ewb-history)) ;remove self, since ewb-get adds
		  (ewb cur raw)))))

(defgroup ewb nil "emacs web browser"
  :group 'hypermedia)

(defcustom ewb-suppressed-extensions "\.el$\\|\.txt$" "documents with these extensions won't be parsed.")

(defcustom ewb-bookmark-file
  "~/emacs/own-lisp/.ewb.bookmarks"
  "bookmark file"
  :group 'ewb)

(defcustom ewb-history-file
  "~/emacs/own-lisp/.ewb.history"
  "history file"
  :group 'ewb)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defvar ewb-href "<[aA][^>]*\\(?:[hH][rR][eE][fF]\\|[nN][aA][mM][eE]\\)=\"?\\([^\">]+\\)[^>]*>")
(defvar ewb-history nil)
(defvar ewb-current-host nil)
(defvar ewb-current-dir nil)
(defvar ewb-current-url nil)
(defvar ewb-connection nil)

(defun ewb-mode ()
  "emacs web browser mode. \\{ewb-mode-map}"
  (interactive)
  (kill-all-local-variables)
;  (setq buffer-read-only t)
  (use-local-map ewb-mode-map)
  (setq mode-name "ewb")
  (setq major-mode 'ewb-mode)
  (add-to-invisibility-spec 'ewb)
  (make-local-variable 'font-lock-defaults)
  (setq font-lock-defaults '(ewb-font-lock-keywords t nil nil nil)); nil nil ((?_ . "w")))))
  (run-hooks 'ewb-mode-hook))

;(defconst ewb-font-lock-keywords
(defvar ewb-font-lock-keywords
;(setq ewb-font-lock-keywords
;  (eval-when-compile
    (list

;;  	 `(,(concat "\\(&[nN][bB][sS][pP];\\)\\|"
;; 				"\\(zzzzz\\)\\|"
;; 				"\\(aaaaa\\)\\|"
;; 				"\\(aaazz\\)\\|"
;;  ;				"\\(<[bB][rR]>\\|<[pP]>\\|<[hH][rR]>\\|</[hH][1-9]>\\)\\|"
;;  ;				(concat ewb-href "\\([^<]*\\)" "</[aA]>\\|")
;;  				"\\(<[^>]*>\\)")
;;  	   (1
;;   		(compose-region (match-beginning 1) (match-end 1) " "))
;; ;;   	   (2
;; ;;   		(compose-region (match-beginning 2) (match-end 2) "\n"))

;; ;;   	   (4 (progn
;; ;;   			(let (( overlay (make-overlay (match-beginning 4) (match-end 4))))
;; ;;   			  (overlay-put overlay 'face 'font-lock-keyword-face)
;; ;;   			  (overlay-put overlay 'mouse-face 'highlight)
;; ;;   			  (overlay-put overlay 'help-echo (match-string 3)))))

;;   	   (5 (progn
;;   			(let ((overlay (make-overlay (match-beginning 5) (match-end 5))))
;;  			  (overlay-put overlay 'invisible 'ewb)
;;  			  (overlay-put overlay 'intangible 'ewb))))
;;  ))))



;;  	 `("\\(<[^>]*>\\)\\|\\(&[a-zA-Z0-9#]+;\\)\\|\r"
;;   	   (0 (progn
;; 			(save-excursion
;; 			  (let((temp-match-data (match-data)))
;; 				(if (string-match "<[bB][rR]>\\|<[pP]>\\|<[hH][rR]>\\|</[hH][1-9]>" (match-string 0))
;; 					(compose-region (match-beginning 0) (match-end 0) "\n")
;; 				  (if (string-match ,ewb-href (match-string 0))
;; 					  (progn
;; 						(let ((link-start (match-end 0)))
;; 						  (re-search-forward "[^<]*</[aA]>")
;; 						  (let (( overlay (make-overlay (match-beginning 0) (match-end 0))))
;; 						  (overlay-put overlay 'face 'font-lock-keyword-face)
;; 						  (overlay-put overlay 'mouse-face 'highlight)
;; 						  (overlay-put overlay 'help-echo (match-string 1)))))

;; 					(if (string-match "&[nN][bB][sS][pP];" (match-string 0))
;; 						  (compose-region (match-beginning 0) (match-end 0) " ")

;; 					  (let ((overlay (make-overlay (match-beginning 0) (match-end 0))))
;; 						(overlay-put overlay 'invisible 'ewb)
;; 						(overlay-put overlay 'intangible 'ewb)))))
;; 				(store-match-data temp-match-data))))))

;;  	 `("<[bB][rR]>\\|<[pP]>\\|<[hH][rR]>\\|</[hH][1-9]>"
;;   	   (0 (progn
;; 			(goto-char (match-beginning 0))
;; 			(delete-region (match-beginning 0) (match-end 0))
;; 			(insert "\n")
;; 		  nil)))

;;    	 `("&[nN][bB][sS][pP];"
;;     	   (0 (progn
;; 			(goto-char (match-beginning 0))
;; 			(delete-region (match-beginning 0) (match-end 0))
;; 			(insert " ")
;;  			nil)))

  	 `(,(concat ewb-href "\\([^<]*\\)" "</[aA]>")
   	   (2 (progn
   			(let (( overlay (make-overlay (match-beginning 2) (match-end 2))))
   			  (overlay-put overlay 'face 'font-lock-keyword-face)
   			  (overlay-put overlay 'mouse-face 'highlight)
   			  (overlay-put overlay 'help-echo (match-string 1)))
			nil)))

  	 `("<[^>]*>\\|&[a-zA-Z0-9#]+;\\|\r"

   	   (0 (progn
			(if (string-match "&[nN][bB][sS][pP];" (match-string 0))
				(progn
				  (goto-char (match-beginning 0))
				  (delete-region (match-beginning 0) (match-end 0))
				  (insert "\n"))
			  (let ((overlay (make-overlay (match-beginning 0) (match-end 0))))
				(overlay-put overlay 'invisible 'ewb)
				(overlay-put overlay 'intangible 'ewb)))
			  nil)))

;;  	 (cons (regexp-opt
;;  			'("HTTP/1.1" "Date:" "Server:" "Keep-Alive:" "Connection:" "Transfer-Encoding:" "Content-Type:")
;;  			'words)
;;  		   'font-lock-builtin-face)
	 ))


(defun ewb-parse-url (url followed &optional raw)
  " a 'followed' link has a looser file spec, tighter host spec:
a host must begin with (http:)?//
a link such as \"a.b\" specifies file or directory.

 an 'interactive' url has a tighter 'file' spec, looser host spec:
a host might not begin with (http:)?//
a link such as \"a.b\" specifies a host."
  (if followed
	  (string-match "\\(http:\\)?\\(//[^/\n]+\\)?\\(/\\)?\\(\\(?:[^/\n]+/\\)*\\)\\(.*\\)" url)
										; 1=protocol?, 2=//host? 3=/?, 4=dir/* 5=file?
	(string-match "\\(http://\\)?\\([^/\n]+\\)\\(/\\)?\\(\\(?:[^/\n]+/\\)*\\)\\(.*\\)" url))
										; 1=protocol//?, 2=host 3=/?, 4=dir/* 5=file?
  (let* ((host (match-string 2 url))
		 (dir (match-string 4 url))
		 (file (match-string 5 url)))
	(if host
		(progn
		  (string-match "\\(//\\)?\\(.*\\)" host)
		  (setq host (match-string 2 host)))) ;just match the 2nd chunk
	(ewb-get host dir file raw)))

(defun ewb-get (host dir file &optional raw) ;port
  (let* ((port 80)
		 (buf (get-buffer-create "*Emacs Web Browser*"))
		 (referer ewb-current-url))
	(if ewb-connection (delete-process ewb-connection))
	(if host (progn (setq ewb-current-host host)
					(setq ewb-current-dir dir))) ;force this (generally to clear)
	(if dir
		(if (not (= 0 (length dir)))
			(setq ewb-current-dir dir)))
	(setq ewb-current-url (concat "http://" ewb-current-host "/" ewb-current-dir file))
	(setq ewb-history (cons ewb-current-url ewb-history))
	(message (concat "downloading " ewb-current-url "..."))
	(setq ewb-connection (open-network-stream "ewb-connection" buf ewb-current-host port))
	(switch-to-buffer buf)
	(erase-buffer)
	(insert (concat ewb-current-url "\n"))
	(overlay-put (make-overlay 1 (+ (length ewb-current-url) 1)) 'face 'font-lock-doc-face)
	(set-process-filter ewb-connection 'ewb-filter)
	(if (or raw (string-match ewb-suppressed-extensions file))
		(font-lock-mode -1))
;	(process-send-string ewb-connection (concat "GET /" ewb-current-dir file " HTTP/1.0 " referer "\r\n\r\n"))))
; (process-send-string ewb-connection (concat "GET /" ewb-current-dir file " HTTP/1.0 " referer "\n\n"))))
;	(process-send-string ewb-connection (concat "GET /" ewb-current-dir file " HTTP/1.0\n\n"))))

	(process-send-string
	 ewb-connection
	 (concat
	  "GET /" ewb-current-dir file " HTTP/1.1\r\n"
	  "Host: " ewb-current-host "\r\n"
	  "User-Agent: Emacs Web Browser\r\n"
	  "Accept: */*\r\n"
	  "Accept-Language: *\r\n"
	  "Accept-Encoding: gzip, deflate, compress\r\n"
	  "Accept-Charset: ISO-8859-1, utf-8\r\n"
	  "Keep-Alive: 300\r\n"
	  "Connection: keep-alive\r\n"
	  "\r\n"))))

(defun ewb-filter (proc string)
  "string is typically 1k"
  (with-current-buffer (process-buffer proc)
	(save-excursion
	  (goto-char (point-max))
	  (insert string))))

(provide 'ewb)
;;; ewb.el ends here
